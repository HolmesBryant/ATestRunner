/**
 * @author Holmes Bryant <https://github.com/HolmesBryant>
 * @license GPL-3.0
 */
class t extends HTMLElement{_direction="row";_active=1;#t;#n;#e;#s;static observedAttributes=["direction","active"];static template='\n    <style>\n      :host {\n        --justify: stretch;\n        --pad: .5rem;\n        --transition: .25s;\n        --height: 100%;\n        display: block;\n        min-height: var(--height);\n      }\n\n      main {\n        display: flex;\n        flex-direction: column;\n        height: inherit;\n        overflow: hidden;\n      }\n\n      main.tabset-column { flex-direction: row; }\n      main.tabset-column-reverse { flex-direction: row-reverse; }\n\n      main.tabset-column nav,\n      main.tabset-column-reverse nav { flex-direction: column; }\n\n      main.tabset-row-reverse nav { flex-direction: row-reverse; }\n\n      nav {\n        display: flex;\n        flex-direction: row;\n        flex-wrap: nowrap;\n        justify-content: var(--justify);\n        position: relative;\n        z-index: 1;\n      }\n\n      #content {\n        box-sizing: border-box;\n        flex: 2;\n        height: inherit;\n        position: relative;\n        z-index: 0;\n      }\n\n      ::slotted(.a-tabset-tab) {\n        box-sizing: content-box;\n        cursor: pointer;\n        height: 100%;\n        position: relative;\n        text-align: center;\n        top: 1px;\n        z-index: 1;\n      }\n\n      ::slotted(.a-tabset-tab.active) {\n        top: 1px;\n      }\n\n      ::slotted(.a-tabset-tab.tabset-column),\n      ::slotted(.a-tabset-tab.tabset-column-reverse) {\n        flex: 0;\n        top: 0;\n        width: 100%;\n      }\n\n      ::slotted(.a-tabset-tab.tabset-column.active) {\n        width: 100.5%;\n      }\n\n      ::slotted(.a-tabset-tab.tabset-column-reverse.active) {\n        left: -1px;\n      }\n\n      ::slotted(.a-tabset-content) {\n        box-sizing: border-box;\n        height: inherit;\n        left: 0;\n        opacity: 0;\n        position: absolute;\n        top: 0;\n        transition: opacity var(--transition);\n        width: 100%;\n        z-index: -1;\n      }\n\n      ::slotted(.a-tabset-content.active) {\n        position: relative;\n        display: block;\n        opacity: 1;\n        z-index: 1;\n      }\n    </style>\n\n    <main part="main">\n      <nav part="tabs">\n        <slot name="title"></slot>\n      </nav>\n\n      <div id="content" part="content">\n        <slot name="content"></slot>\n      </div>\n    </main>\n  ';constructor(){super(),this.attachShadow({mode:"open"}),this.shadowRoot.innerHTML=t.template}attributeChangedCallback(t,n,e){this[t]=e}connectedCallback(){this.#t=new AbortController,this.#e=this.shadowRoot.querySelector("main"),this.#s=this.querySelectorAll('[slot="title"]'),this.#n=this.querySelectorAll('[slot="content"]'),this.setDirection(this.direction),this.renderTabs(),this.selectTab(this.active)}disconnectedCallback(){this.#t&&(this.#t.abort(),this.#t=null),this.#n=null,this.#s=null,this.#e=null}async fetchData(t,n){fetch(n).then((t=>t.text())).then((n=>{const e=(new DOMParser).parseFromString(n,"text/html");t.innerHTML=e.body.innerHTML})).catch((t=>{console.error(t)}))}handleClick(t){const n=Array.from(this.#s).indexOf(t.target)+1;this.active=n}setDirection(t){const n=["tabset-row","tabset-column","tabset-row-reverse","tabset-column-reverse"];if(this.#e){this.#e.className=`tabset-${t}`;for(const e of this.#s)e.classList.remove(...n),e.classList.add(`tabset-${t}`)}}renderTabs(){if(this.#s){for(const t of this.#s)t.classList.add("a-tabset-tab"),t.addEventListener("click",(t=>{this.handleClick(t)}),{signal:this.#t.signal});for(const t of this.#n)t.classList.add("a-tabset-content")}}selectTab(t){if(!this.#s)return;const n=t-1;if(!(t>this.#s.length||t<1)){for(let t=0;t<this.#s.length;t++){const e=this.#n[t].dataset.src;if(this.#n[t].classList.toggle("active",t===n),this.#s[t].classList.toggle("active",t===n),t===n)this.#s[t].classList.add("active"),e&&this.fetchData(this.#n[t],e);else if(this.#s[t].classList.remove("active"),e){const n=this.#n[t].children;for(const t of n)t.remove()}}t!==this.active&&(this.active=t)}}get direction(){return this._direction}set direction(t){this._direction=t,this.setDirection(t)}get active(){return this._active}set active(t){t=+t,this._active=t,this.selectTab(t)}}customElements.get("a-tabset")||customElements.define("a-tabset",t);export{t as default};
